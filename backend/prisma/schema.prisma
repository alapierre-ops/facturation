generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  name              String
  fullName          String?
  birthDate         DateTime?
  address           String?
  phoneNumber       String?
  maxAnnualTurnover Float?
  chargeRate        Float?    @default(0)
  role              String    @default("user")
  country           String    @default("FRANCE")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  clients           Client[]
  projects          Project[]
  quotes            Quotes[]
  invoices          Invoice[]
}

model Client {
  id        Int       @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  address   String?
  country   String    @default("FRANCE")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  projects  Project[]
  quotes    Quotes[]
  invoices  Invoice[]
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  status      String    @default("pending")
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  clientId    Int
  client      Client    @relation(fields: [clientId], references: [id])
  quotes      Quotes[]
  invoices    Invoice[]
}

model Quotes {
  id          Int          @id @default(autoincrement())
  number      String       @unique
  date        DateTime     @default(now())
  status      String       @default("draft")
  subtotal    Float
  taxAmount   Float        @default(0)
  total       Float
  country     String       @default("FRANCE")
  taxRate     String       @default("STANDARD")
  notes       String?
  paymentType String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
  clientId    Int
  client      Client       @relation(fields: [clientId], references: [id])
  projectId   Int?
  project     Project?     @relation(fields: [projectId], references: [id])
  lines       LineQuote[]
  invoices    Invoice[]
}

model LineQuote {
  id          Int      @id @default(autoincrement())
  description String
  quantity    Float
  unitPrice   Float
  subtotal    Float
  taxAmount   Float    @default(0)
  total       Float
  quoteId     Int
  quotes      Quotes    @relation(fields: [quoteId], references: [id])
}

model Invoice {
  id          Int           @id @default(autoincrement())
  number      String        @unique
  date        DateTime      @default(now())
  dueDate     DateTime
  status      String        @default("draft")
  subtotal    Float
  taxAmount   Float         @default(0)
  total       Float
  country     String        @default("FRANCE")
  taxRate     String        @default("STANDARD")
  notes       String?
  paymentType String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  clientId    Int
  client      Client        @relation(fields: [clientId], references: [id])
  projectId   Int?
  project     Project?      @relation(fields: [projectId], references: [id])
  quoteId     Int?
  quotes      Quotes?        @relation(fields: [quoteId], references: [id])
  lines       LineInvoice[]
}

model LineInvoice {
  id          Int      @id @default(autoincrement())
  description String
  quantity    Float
  unitPrice   Float
  subtotal    Float
  taxAmount   Float    @default(0)
  total       Float
  invoiceId   Int
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
} 